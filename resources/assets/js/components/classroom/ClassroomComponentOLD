<template>
    <div>
        <div v-if="!loader && !error">
            <div class="row">
                <div class="col-md-6">
                    <video ref="video"></video>

                    <video v-for="peer in swarm.peers" :src="createUrl(peer.stream)" width="200" autoplay></video>

                    <!--<Video-->
                    <!--ref="video"-->
                    <!--:stream="stream"-->
                    <!--:tutor="isTutor"-->
                    <!--:swarm="swarm"-->
                    <!--:peers="peers"-->
                    <!--&gt;</Video>-->
                </div>
                <div class="col-md-6">
                    <Chat
                        ref="chat"
                        :t="t"
                        :host="host"
                        :room="roomData"
                        :user="userData"
                        :lang="lang"
                        v-on:send="sendMessage"
                    ></Chat>
                </div>
            </div>
        </div>
        <div v-else>
            <div v-if="error" class="alert alert-danger">
                {{ error }}
            </div>
            <div v-else>loading...</div>
        </div>
    </div>
</template>

<script>
  import Peer from 'simple-peer'
  import signalhub from 'signalhub'
  import createSwarm from 'webrtc-swarm'

  import Chat from './chat/ChatComponent.vue'
  import Video from './video/VideoComponent.vue'

  export default {
    props: ['trans', 'user', 'host', 'room'],
    components: {
      Chat,
      Video
    },
    data() {
      return {
        lang: 'en',
        error: false,
        loader: true,
        hub: null,
        swarm: null,
        stream: null,
        peers: [],
        roomData: JSON.parse(this.room),
        userData: JSON.parse(this.user),
        isTutor: false,
        t: JSON.parse(this.trans),
        server: null,
        peerConnect: null,
        roomName: null,
        channelName: null,
        peersId: {},
      }
    },
    watch: {
      peers: {
        handler: function (value) {
          this.changeTotalUsers(value);
        },
        deep: true
      }
    },
    created() {
      this.lang = document.querySelector('html').getAttribute('lang');
      this.isTutor = parseInt(this.roomData.tutor.user_id) === parseInt(this.userData.id);
      this.roomName = `room-${this.roomData.id}`;
      this.channelName = `room-${this.roomData.id}-connect`;
    },
    mounted() {
      this.changeTotalUsers(this.peers);

      navigator.mediaDevices.getUserMedia({
        video: this.roomData.video,
        audio: this.roomData.audio
      })
        .then(stream => {
          this.loader = false;

          this.server = signalhub(`room:${this.roomData.id}`, [
            `${this.host || 'http://localhost'}:6003`
          ]);

          this.peerConnect = new Peer({
            initiator: true,
            trickle: false,
            stream: stream
          });

          this.swarm = createSwarm(this.server, {
            stream: stream
          });

//          this.peerConnect.on('signal', data => {
//            this.swarm.peers.forEach(peer => {
//              peer.send(JSON.stringify({
//                type: 'signal',
//                signal: data
//              }));
//            });
//          });

          this.swarm.on('peer', (peer, id) => {
            peer.on('data', message => {
              message = JSON.parse(message);

              if (message.type === 'stream') {
                peer.addStream(message.stream);
              }
            });

            peer.send(JSON.stringify({
              type: 'stream',
              stream: stream
            }));
          });



//          this.initPeer(true, stream);
//
//          this.server.subscribe(this.channelName).on('data', data => {
//            if (data.userId !== this.userData.id) {
//              this.initPeer(false, stream);
//              this.peerConnect.signal(data.signal);
//            }
//          });

//            const swarm = createSwarm(server, {
//            stream: stream
//          });
//
//          swarm.on('connect', (peer, id) => {
//            console.log(id);
//          });


//          const peerConnect = new Peer({
//            initiator: location.hash === '#init',
//            trickle: false,
//            stream: stream
//          });
//
//          peerConnect.on('signal', data => {
//            this.swarm = new createSwarm(hub, {
//              channelConfig: {
//                peer: data
//              }
//            });
//
//            this.swarm.on('peer', (peer, id) => {
//              peerConnect.signal(peer.channelConfig.peer);
//            });
//
//            this.swarm.on('disconnect', (peer, id) => {
//              //this.deletePeer(id);
//            });
//          });
//
//          peerConnect.on('stream', stream => {
//            this.$refs.video.srcObject = stream;
//            this.$refs.video.play();
//          });

//          this.swarm.on('peer', (peer, id) => {
//            peerConnect.signal(peer.channelConfig.peer);
//
//
//
////            const peer = new Peer({
////              initiator: true,
////              trickle: false,
////              stream: peer.stream
////            });
////
////            peer.on('signal', )
////
////
//
//
////          let exist = false;
////
////          this.peers.forEach(item => {
////            if (item.user.id === this.user.id) {
////              exist = true;
////            }
////          });
//
////            console.log(peer);
//
////            peer.on('data', data => {
////              data = JSON.parse(data.toString());
////
////              switch (data.type) {
////                case 'message':
////                  this.getChat().getMessage().addMessage(data.data);
////                  break;
////              }
////            });
//
////          if (exist === true) {
////            return false;
////          }
//
////            let data = Object.assign({}, {id: id, peer: peer});
////
////            this.peers.push(data);
//          });
        });

//      getUserMedia({
//        video: this.roomData.video,
//        audio: this.roomData.audio
//      }, (err, stream) => {
//        if (err) {
//          this.error = err.message;
//          return console.error(err);
//        }
//
//
//      });
    },
    methods: {
      createUrl(stream) {
        return URL.createObjectURL(stream);
      },

      initPeer(init, stream) {
        this.peerConnect = new Peer({
          initiator: init,
          trickle: false,
          stream: stream
        });

        this.peerConnect.on('signal', data => {
          console.log('ON SIGNAL', data);

          if (init === true) {
            this.server.broadcast(this.channelName, {
              signal: data,
              userId: this.userData.id
            });
          }
        });

        this.peerConnect.on('stream', stream => {
          this.$refs.video.srcObject = stream;
          this.$refs.video.play();
        });
      },

      changeTotalUsers(value) {
        let count = value.length;
        let element = document.getElementById('total-users');
        if (element) {
          element.innerText = count;
        }
      },

      deletePeer(id) {
        this.peers.forEach((item, key) => {
          if (item.id === id) {
            this.peers.splice(key, 1);
          }
        });
      },

      sendMessage(message) {
        this.swarm.peers.forEach(peer => {
          peer.send(JSON.stringify({
            type: 'message',
            data: JSON.parse(message)
          }));
        });
      },

      getChat() {
        return this.$refs.chat;
      }
    }
  }
</script>